version: 0.2

phases:
  install:
    commands:
      - export IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export ACCOUNT=$(echo $CODEBUILD_BUILD_ARN |cut -f5 -d:)
      - echo '***** This is the current env:'
      - printenv
      - echo '***** Download nodejs repo:'
      - curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
      - echo '***** install nodejs:'
      - apt-get install -y --force-yes nodejs build-essential
      - echo '***** install our npms:'
      - npm install
  pre_build:
    commands:
      - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' ./kubernetes/deployment.yml
      - $(aws ecr get-login --no-include-email)
      - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      - echo '***** run tests:'
      - npm test -- > testresult.txt
      - docker build -t $REPOSITORY_URI:$TAG .
#       - docker build -t nodeimage:latest .
  post_build:
    commands:
      - echo $IMAGE_TAG > code_hash.txt
#       - docker push $REPOSITORY_URI:$TAG
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - kubectl apply -f ./kubernetes/deployment.yml
      - printf '[{"name":"example-backend","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#       - printf '[{"name":"hello-k8s","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json      
      # - docker pull anchore/cli
      # - docker run -d -v $(pwd):/source-dir -v /var/run/docker.sock:/var/run/docker.sock --name anchore anchore/cli:latest
      # - docker exec anchore anchore feeds sync
      # - docker exec anchore anchore analyze --image myimage --dockerfile /source-dir/Dockerfile

artifacts:
  files:
    - '**/*'
